import pandas as pd
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from buttons.buttons import (
    get_admin_buttons,
    get_cancel_keyboard,
    get_type_buttons,
    get_user_buttons,
)
from services.date_service import (
    add_date,
    book_date_in_file,
    get_available_dates,
    get_filtered_records,
    get_upcoming_records,
    get_user_records,
    update_record,
)
from user_type import ADMIN_IDS, get_buttons_for_user, is_admin

DATA_FILE = "dates.csv"
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
SERVICE_NAMES = {"manicure": "–ú–∞–Ω–∏–∫—é—Ä", "pedicure": "–ü–µ–¥–∏–∫—é—Ä", "brows": "–ë—Ä–æ–≤–∏"}


async def wake_up(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    chat = update.effective_chat
    chat_id = update.message.chat.id
    name = update.message.chat.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if is_admin(chat_id):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        reply_markup = get_admin_buttons()  # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        await context.bot.send_message(
            chat_id=chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, {}, –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—ã? –ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏.".format(
                name
            ),
            reply_markup=reply_markup,
        )
    else:
        reply_markup = get_user_buttons()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        await context.bot.send_message(
            chat_id=chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.\n–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è".format(
                name
            ),
            reply_markup=reply_markup,
        )


async def add_date_handler(update, context) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    chat_id = update.callback_query.message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_query
    user_states[chat_id] = "adding_date"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM.",
        reply_markup=get_cancel_keyboard(),
    )


async def cancel_handler(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã."""
    chat_id = update.callback_query.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(chat_id) is not None:
        user_states[chat_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await context.bot.send_message(
            chat_id=chat_id, text="–•–æ—Ä–æ—à–æ, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )

    reply_markup = get_buttons_for_user(chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(
        chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )


async def handle_date_input(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.message.chat.id

    if user_states.get(chat_id) == "adding_date":
        date_time = update.message.text

        try:
            date_str, time_str = (
                date_time.split()
            )  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            result_message = add_date(
                date_str, time_str
            )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã

            if "–û—à–∏–±–∫–∞" in result_message:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=result_message,
                    reply_markup=get_cancel_keyboard(),
                )
                return

            await context.bot.send_message(
                chat_id=chat_id,
                text=result_message,
                reply_markup=get_cancel_keyboard(),
            )
            user_states[chat_id] = (
                None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            )
        except ValueError:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM.",
                reply_markup=get_cancel_keyboard(),
            )
            return
    else:
        reply_markup = get_buttons_for_user(chat_id)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=reply_markup,
        )
        return


async def view_records(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    chat_id = update.callback_query.message.chat.id
    reply_markup = get_buttons_for_user(chat_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    sorted_records = get_filtered_records()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not sorted_records.empty:
        message = "–¢–≤–æ–∏ –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Å—è—Ü (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 30):\n"
        for index, row in sorted_records.iterrows():
            record_message = f"üìÖ  {row['–î–∞—Ç–∞'].strftime('%d.%m.%Y')}  üìÖ    ‚è∞  {row['–í—Ä–µ–º—è']}  ‚è∞\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if row["–ò–º—è"] is not None and not pd.isna(row["–ò–º—è"]):
                record_message += f"üë§  {row['–ò–º—è']:<22}"
            if row["–¢–∏–ø"] is not None and not pd.isna(row["–¢–∏–ø"]):
                record_message += f"üåü  {row['–¢–∏–ø']}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–≤–Ω–æ 1
            if row["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] == 1:
                record_message += f"{'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ':>30}\n"

            message += f"{record_message}\n"
    else:
        message = "üò¢ –ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç "

    await context.bot.send_message(
        chat_id=chat_id, text=message, reply_markup=reply_markup
    )


async def view_free_records(update, context) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π,
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    chat_id = update.callback_query.message.chat.id
    reply_markup = get_buttons_for_user(chat_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    sorted_records = get_filtered_records()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, –≥–¥–µ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—è
    free_records = sorted_records[sorted_records["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"].isnull()]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not free_records.empty:
        message = "–°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n"
        for index, row in free_records.iterrows():
            record_message = f"üìÖ  {row['–î–∞—Ç–∞'].strftime('%d.%m.%Y')}  üìÖ     ‚è∞  {row['–í—Ä–µ–º—è']}  ‚è∞\n"

            message += f"{record_message}\n"
    else:
        message = "üò¢  –°–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç"

    await context.bot.send_message(
        chat_id=chat_id, text=message, reply_markup=reply_markup
    )


async def book_date(update, context) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–∞—Ç—ã."""
    chat_id = update.callback_query.message.chat.id
    available_dates = get_available_dates()
    reply_markup = get_buttons_for_user(chat_id)

    if not available_dates:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=reply_markup,
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"book_{date}")]
        for date in available_dates
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:",
        reply_markup=reply_markup,
    )


async def handle_booking(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.callback_query.message.chat.id
    selected_date = update.callback_query.data.split("_")[
        1
    ]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_type_buttons(),  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –≤ user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data["selected_date"] = selected_date


async def handle_service_choice(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏."""
    query = update.callback_query
    await query.answer()  # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ callback_data
    chosen_service = query.data.split("_")[1]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ user_data
    selected_date = context.user_data.get("selected_date")
    if not selected_date:
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ."
        )
        return

    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    service_name = SERVICE_NAMES.get(chosen_service, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = ADMIN_IDS[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    keyboard = [
        [
            InlineKeyboardButton(
                "–î–∞",
                callback_data=f"confirm|{selected_date}|{user_id}|{query.from_user.username}|{service_name}",
            ),
            InlineKeyboardButton("–ù–µ—Ç", callback_data=f"deny|{user_id}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=admin_id,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{query.from_user.username} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É {service_name} –Ω–∞ –¥–∞—Ç—É {selected_date}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å?",
        reply_markup=reply_markup,
    )

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.edit_message_reply_markup(
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
        reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
    )


async def confirm_booking(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    await query.answer()  # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split("|")
    selected_date = data[1]
    user_id = data[2]
    name = data[3]
    service_type = data[4]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏

    reply_markup = get_buttons_for_user(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    book_date_in_file(
        selected_date, user_id, name, service_type  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏
    )  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=user_id, text="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", reply_markup=reply_markup
    )
    await query.message.edit_text(
        text="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", reply_markup=None
    )


async def deny_booking(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    chat_id = update.callback_query.message.chat.id
    await query.answer()  # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    reply_markup = get_buttons_for_user(chat_id)
    user_id = query.data.split("|")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.", reply_markup=reply_markup
    )

    reply_markup = get_buttons_for_user(user_id)
    await context.bot.send_message(
        chat_id=user_id,
        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=reply_markup,
    )


async def view_personal_records(update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π."""
    user_id = update.callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    records = get_user_records(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reply_markup = get_buttons_for_user(user_id)

    if records is None:
        await context.bot.send_message(
            chat_id=update.callback_query.message.chat.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    messages = [
        f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {type} - {date} –≤ {time}."
        for date, time, type in records
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(
        chat_id=update.callback_query.message.chat.id,
        text="\n".join(messages),
        reply_markup=reply_markup,  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    )


async def cancel_record(update, context) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.callback_query.from_user.id
    records = get_user_records(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if records is None:
        await context.bot.send_message(
            chat_id=update.callback_query.message.chat.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    buttons = [
        InlineKeyboardButton(
            f"‚ùå {type} {date} –≤ {time}",
            callback_data=f"confirm_cancel_{date}_{time}",
        )
        for date, time, type in records
    ]
    reply_markup = InlineKeyboardMarkup([[button] for button in buttons])

    await context.bot.send_message(
        chat_id=update.callback_query.message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=reply_markup,
    )


async def confirm_cancel_record(update, context) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏."""
    user_id = update.callback_query.from_user.id
    name = update.callback_query.from_user.name
    data = update.callback_query.data.split("_")
    date = data[2]
    time = data[3]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV
    update_record(user_id, date, time)

    await update.callback_query.answer()
    reply_markup = get_user_buttons()
    await update.callback_query.edit_message_reply_markup(reply_markup=None)
    await context.bot.send_message(
        chat_id=update.callback_query.message.chat.id,
        text=f"–ó–∞–ø–∏—Å—å –Ω–∞ {date} –≤ {time} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup,
    )
    await context.bot.send_message(
        chat_id=ADMIN_IDS[0],
        text=f"–ö–ª–∏–µ–Ω—Ç {name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {date} –≤ {time}.",
    )


async def handle_admin_cancel_date(update):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    upcoming_records = get_upcoming_records()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π
    buttons = []
    for record in upcoming_records:
        date, time, name, service_type, id = record
        button_text = f"{date} –≤ {time} - {name} ({service_type})"
        buttons.append(
            [
                InlineKeyboardButton(
                    button_text, callback_data=f"cancel|{date}|{time}|{id}"
                )
            ]
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.message.reply_text(
        "–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?", reply_markup=reply_markup
    )


async def handle_admin_cancel_record(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""

    data = update.callback_query.data.split("|")
    update_record(int(data[3]), data[1], data[2])
    await context.bot.send_message(
        chat_id=ADMIN_IDS[0],
        text=f"–ó–∞–ø–∏—Å—å –Ω–∞ {data[1]} –≤ {data[2]} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_admin_buttons(),
    )
    await context.bot.send_message(
        chat_id=int(data[3]),
        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–∞ –∞–¥–º–∏–Ω–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=get_buttons_for_user(int(data[3])),
    )


def setup_handlers(application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞."""
    application.add_handler(
        CommandHandler("start", wake_up)
    )  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–π –¥–∞—Ç—ã
    application.add_handler(
        CallbackQueryHandler(add_date_handler, pattern="^add_date$")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    application.add_handler(
        CallbackQueryHandler(view_records, pattern="^view_records$")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    application.add_handler(
        CallbackQueryHandler(cancel_handler, pattern="^cancel$")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    application.add_handler(
        CallbackQueryHandler(view_free_records, pattern="^view_free_records$")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É
    application.add_handler(
        CallbackQueryHandler(book_date, pattern="^book_date$")
    )
    application.add_handler(
        CallbackQueryHandler(handle_booking, pattern="^book_")
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(
        CallbackQueryHandler(confirm_booking, pattern="^confirm\\|")
    )
    application.add_handler(
        CallbackQueryHandler(deny_booking, pattern="^deny\\|")
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    application.add_handler(
        CallbackQueryHandler(view_personal_records, pattern="my_records")
    )

    application.add_handler(
        CallbackQueryHandler(cancel_record, pattern="^cancel_record$")
    )
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    application.add_handler(
        CallbackQueryHandler(confirm_cancel_record, pattern=r"^confirm_cancel_")
    )

    application.add_handler(
        CallbackQueryHandler(handle_service_choice, pattern="^service_")
    )
    application.add_handler(
        CallbackQueryHandler(
            handle_admin_cancel_date, pattern="^admin_cancel_date$"
        )
    )
    application.add_handler(
        CallbackQueryHandler(handle_admin_cancel_record, pattern="^cancel\\|")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_input)
    )
